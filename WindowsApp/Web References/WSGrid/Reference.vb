'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
'
Namespace WSGrid
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="WebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class WebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ModificaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private fillMascaraOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMascaraOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setMascaraOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateMascaraOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.GridFullEdit.My.MySettings.Default.GridFullEdit_WSGrid_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ModificaCompleted As ModificaCompletedEventHandler
        
        '''<remarks/>
        Public Event fillMascaraCompleted As fillMascaraCompletedEventHandler
        
        '''<remarks/>
        Public Event getMascaraCompleted As getMascaraCompletedEventHandler
        
        '''<remarks/>
        Public Event setMascaraCompleted As setMascaraCompletedEventHandler
        
        '''<remarks/>
        Public Event updateMascaraCompleted As updateMascaraCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Modifica", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Modifica(ByVal DS As MascaraTeste) As MascaraTeste.MSK_FORNECEDORDataTable
            Dim results() As Object = Me.Invoke("Modifica", New Object() {DS})
            Return CType(results(0),MascaraTeste.MSK_FORNECEDORDataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModificaAsync(ByVal DS As MascaraTeste)
            Me.ModificaAsync(DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModificaAsync(ByVal DS As MascaraTeste, ByVal userState As Object)
            If (Me.ModificaOperationCompleted Is Nothing) Then
                Me.ModificaOperationCompleted = AddressOf Me.OnModificaOperationCompleted
            End If
            Me.InvokeAsync("Modifica", New Object() {DS}, Me.ModificaOperationCompleted, userState)
        End Sub
        
        Private Sub OnModificaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModificaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModificaCompleted(Me, New ModificaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/fillMascara", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub fillMascara(ByRef x As MascaraTeste)
            Dim results() As Object = Me.Invoke("fillMascara", New Object() {x})
            x = CType(results(0),MascaraTeste)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fillMascaraAsync(ByVal x As MascaraTeste)
            Me.fillMascaraAsync(x, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub fillMascaraAsync(ByVal x As MascaraTeste, ByVal userState As Object)
            If (Me.fillMascaraOperationCompleted Is Nothing) Then
                Me.fillMascaraOperationCompleted = AddressOf Me.OnfillMascaraOperationCompleted
            End If
            Me.InvokeAsync("fillMascara", New Object() {x}, Me.fillMascaraOperationCompleted, userState)
        End Sub
        
        Private Sub OnfillMascaraOperationCompleted(ByVal arg As Object)
            If (Not (Me.fillMascaraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent fillMascaraCompleted(Me, New fillMascaraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMascara", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMascara() As MascaraTeste.MSK_FORNECEDORDataTable
            Dim results() As Object = Me.Invoke("getMascara", New Object(-1) {})
            Return CType(results(0),MascaraTeste.MSK_FORNECEDORDataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMascaraAsync()
            Me.getMascaraAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMascaraAsync(ByVal userState As Object)
            If (Me.getMascaraOperationCompleted Is Nothing) Then
                Me.getMascaraOperationCompleted = AddressOf Me.OngetMascaraOperationCompleted
            End If
            Me.InvokeAsync("getMascara", New Object(-1) {}, Me.getMascaraOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMascaraOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMascaraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMascaraCompleted(Me, New getMascaraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setMascara", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setMascara(ByVal DS As MascaraTeste) As Integer
            Dim results() As Object = Me.Invoke("setMascara", New Object() {DS})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setMascaraAsync(ByVal DS As MascaraTeste)
            Me.setMascaraAsync(DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setMascaraAsync(ByVal DS As MascaraTeste, ByVal userState As Object)
            If (Me.setMascaraOperationCompleted Is Nothing) Then
                Me.setMascaraOperationCompleted = AddressOf Me.OnsetMascaraOperationCompleted
            End If
            Me.InvokeAsync("setMascara", New Object() {DS}, Me.setMascaraOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetMascaraOperationCompleted(ByVal arg As Object)
            If (Not (Me.setMascaraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setMascaraCompleted(Me, New setMascaraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateMascara", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updateMascara(ByRef DS As MascaraTeste) As Integer
            Dim results() As Object = Me.Invoke("updateMascara", New Object() {DS})
            DS = CType(results(1),MascaraTeste)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateMascaraAsync(ByVal DS As MascaraTeste)
            Me.updateMascaraAsync(DS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateMascaraAsync(ByVal DS As MascaraTeste, ByVal userState As Object)
            If (Me.updateMascaraOperationCompleted Is Nothing) Then
                Me.updateMascaraOperationCompleted = AddressOf Me.OnupdateMascaraOperationCompleted
            End If
            Me.InvokeAsync("updateMascara", New Object() {DS}, Me.updateMascaraOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateMascaraOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateMascaraCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateMascaraCompleted(Me, New updateMascaraCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("MascaraTeste"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class MascaraTeste
        Inherits Global.System.Data.DataSet
        
        Private tableMSK_FORNECEDOR As MSK_FORNECEDORDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("MSK_FORNECEDOR")) Is Nothing) Then
                    MyBase.Tables.Add(New MSK_FORNECEDORDataTable(ds.Tables("MSK_FORNECEDOR")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false),  _
         Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property MSK_FORNECEDOR() As MSK_FORNECEDORDataTable
            Get
                Return Me.tableMSK_FORNECEDOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.BrowsableAttribute(true),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As MascaraTeste = CType(MyBase.Clone,MascaraTeste)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("MSK_FORNECEDOR")) Is Nothing) Then
                    MyBase.Tables.Add(New MSK_FORNECEDORDataTable(ds.Tables("MSK_FORNECEDOR")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableMSK_FORNECEDOR = CType(MyBase.Tables("MSK_FORNECEDOR"),MSK_FORNECEDORDataTable)
            If (initTable = true) Then
                If (Not (Me.tableMSK_FORNECEDOR) Is Nothing) Then
                    Me.tableMSK_FORNECEDOR.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "MascaraTeste"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/MascaraTeste.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableMSK_FORNECEDOR = New MSK_FORNECEDORDataTable
            MyBase.Tables.Add(Me.tableMSK_FORNECEDOR)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeMSK_FORNECEDOR() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As MascaraTeste = New MascaraTeste
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub MSK_FORNECEDORRowChangeEventHandler(ByVal sender As Object, ByVal e As MSK_FORNECEDORRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         Global.System.Serializable(),  _
         Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class MSK_FORNECEDORDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnCD_FORNECEDOR As Global.System.Data.DataColumn
            
            Private columnTP_PESSOA As Global.System.Data.DataColumn
            
            Private columnNM_PESSOA As Global.System.Data.DataColumn
            
            Private columnDC_FEDERAL As Global.System.Data.DataColumn
            
            Private columnNM_CONTATO As Global.System.Data.DataColumn
            
            Private columnTE_CONTATO As Global.System.Data.DataColumn
            
            Private columnTE_CORPORATIVO As Global.System.Data.DataColumn
            
            Private columnTE_FAX As Global.System.Data.DataColumn
            
            Private columnED_CIDADE As Global.System.Data.DataColumn
            
            Private columnED_UF As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "MSK_FORNECEDOR"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CD_FORNECEDORColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCD_FORNECEDOR
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TP_PESSOAColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTP_PESSOA
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NM_PESSOAColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNM_PESSOA
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DC_FEDERALColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDC_FEDERAL
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NM_CONTATOColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNM_CONTATO
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TE_CONTATOColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTE_CONTATO
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TE_CORPORATIVOColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTE_CORPORATIVO
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TE_FAXColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTE_FAX
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ED_CIDADEColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnED_CIDADE
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ED_UFColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnED_UF
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As MSK_FORNECEDORRow
                Get
                    Return CType(Me.Rows(index),MSK_FORNECEDORRow)
                End Get
            End Property
            
            Public Event MSK_FORNECEDORRowChanging As MSK_FORNECEDORRowChangeEventHandler
            
            Public Event MSK_FORNECEDORRowChanged As MSK_FORNECEDORRowChangeEventHandler
            
            Public Event MSK_FORNECEDORRowDeleting As MSK_FORNECEDORRowChangeEventHandler
            
            Public Event MSK_FORNECEDORRowDeleted As MSK_FORNECEDORRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddMSK_FORNECEDORRow(ByVal row As MSK_FORNECEDORRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddMSK_FORNECEDORRow(ByVal TP_PESSOA As String, ByVal NM_PESSOA As String, ByVal DC_FEDERAL As String, ByVal NM_CONTATO As String, ByVal TE_CONTATO As String, ByVal TE_CORPORATIVO As String, ByVal TE_FAX As String, ByVal ED_CIDADE As String, ByVal ED_UF As String) As MSK_FORNECEDORRow
                Dim rowMSK_FORNECEDORRow As MSK_FORNECEDORRow = CType(Me.NewRow,MSK_FORNECEDORRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, TP_PESSOA, NM_PESSOA, DC_FEDERAL, NM_CONTATO, TE_CONTATO, TE_CORPORATIVO, TE_FAX, ED_CIDADE, ED_UF}
                rowMSK_FORNECEDORRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowMSK_FORNECEDORRow)
                Return rowMSK_FORNECEDORRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByCD_FORNECEDOR(ByVal CD_FORNECEDOR As Integer) As MSK_FORNECEDORRow
                Return CType(Me.Rows.Find(New Object() {CD_FORNECEDOR}),MSK_FORNECEDORRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As MSK_FORNECEDORDataTable = CType(MyBase.Clone,MSK_FORNECEDORDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New MSK_FORNECEDORDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnCD_FORNECEDOR = MyBase.Columns("CD_FORNECEDOR")
                Me.columnTP_PESSOA = MyBase.Columns("TP_PESSOA")
                Me.columnNM_PESSOA = MyBase.Columns("NM_PESSOA")
                Me.columnDC_FEDERAL = MyBase.Columns("DC_FEDERAL")
                Me.columnNM_CONTATO = MyBase.Columns("NM_CONTATO")
                Me.columnTE_CONTATO = MyBase.Columns("TE_CONTATO")
                Me.columnTE_CORPORATIVO = MyBase.Columns("TE_CORPORATIVO")
                Me.columnTE_FAX = MyBase.Columns("TE_FAX")
                Me.columnED_CIDADE = MyBase.Columns("ED_CIDADE")
                Me.columnED_UF = MyBase.Columns("ED_UF")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnCD_FORNECEDOR = New Global.System.Data.DataColumn("CD_FORNECEDOR", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCD_FORNECEDOR)
                Me.columnTP_PESSOA = New Global.System.Data.DataColumn("TP_PESSOA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTP_PESSOA)
                Me.columnNM_PESSOA = New Global.System.Data.DataColumn("NM_PESSOA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNM_PESSOA)
                Me.columnDC_FEDERAL = New Global.System.Data.DataColumn("DC_FEDERAL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDC_FEDERAL)
                Me.columnNM_CONTATO = New Global.System.Data.DataColumn("NM_CONTATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNM_CONTATO)
                Me.columnTE_CONTATO = New Global.System.Data.DataColumn("TE_CONTATO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTE_CONTATO)
                Me.columnTE_CORPORATIVO = New Global.System.Data.DataColumn("TE_CORPORATIVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTE_CORPORATIVO)
                Me.columnTE_FAX = New Global.System.Data.DataColumn("TE_FAX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTE_FAX)
                Me.columnED_CIDADE = New Global.System.Data.DataColumn("ED_CIDADE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnED_CIDADE)
                Me.columnED_UF = New Global.System.Data.DataColumn("ED_UF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnED_UF)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCD_FORNECEDOR}, true))
                Me.columnCD_FORNECEDOR.AutoIncrement = true
                Me.columnCD_FORNECEDOR.AutoIncrementSeed = -1
                Me.columnCD_FORNECEDOR.AutoIncrementStep = -1
                Me.columnCD_FORNECEDOR.AllowDBNull = false
                Me.columnCD_FORNECEDOR.ReadOnly = true
                Me.columnCD_FORNECEDOR.Unique = true
                Me.columnTP_PESSOA.MaxLength = 1
                Me.columnNM_PESSOA.MaxLength = 80
                Me.columnDC_FEDERAL.ReadOnly = true
                Me.columnDC_FEDERAL.MaxLength = 18
                Me.columnNM_CONTATO.MaxLength = 20
                Me.columnTE_CONTATO.MaxLength = 14
                Me.columnTE_CORPORATIVO.MaxLength = 14
                Me.columnTE_FAX.MaxLength = 14
                Me.columnED_CIDADE.MaxLength = 40
                Me.columnED_UF.MaxLength = 2
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewMSK_FORNECEDORRow() As MSK_FORNECEDORRow
                Return CType(Me.NewRow,MSK_FORNECEDORRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New MSK_FORNECEDORRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(MSK_FORNECEDORRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.MSK_FORNECEDORRowChangedEvent) Is Nothing) Then
                    RaiseEvent MSK_FORNECEDORRowChanged(Me, New MSK_FORNECEDORRowChangeEvent(CType(e.Row,MSK_FORNECEDORRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.MSK_FORNECEDORRowChangingEvent) Is Nothing) Then
                    RaiseEvent MSK_FORNECEDORRowChanging(Me, New MSK_FORNECEDORRowChangeEvent(CType(e.Row,MSK_FORNECEDORRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.MSK_FORNECEDORRowDeletedEvent) Is Nothing) Then
                    RaiseEvent MSK_FORNECEDORRowDeleted(Me, New MSK_FORNECEDORRowChangeEvent(CType(e.Row,MSK_FORNECEDORRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.MSK_FORNECEDORRowDeletingEvent) Is Nothing) Then
                    RaiseEvent MSK_FORNECEDORRowDeleting(Me, New MSK_FORNECEDORRowChangeEvent(CType(e.Row,MSK_FORNECEDORRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveMSK_FORNECEDORRow(ByVal row As MSK_FORNECEDORRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As MascaraTeste = New MascaraTeste
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "MSK_FORNECEDORDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class MSK_FORNECEDORRow
            Inherits Global.System.Data.DataRow
            
            Private tableMSK_FORNECEDOR As MSK_FORNECEDORDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableMSK_FORNECEDOR = CType(Me.Table,MSK_FORNECEDORDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CD_FORNECEDOR() As Integer
                Get
                    Return CType(Me(Me.tableMSK_FORNECEDOR.CD_FORNECEDORColumn),Integer)
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.CD_FORNECEDORColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TP_PESSOA() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.TP_PESSOAColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TP_PESSOA' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.TP_PESSOAColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NM_PESSOA() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.NM_PESSOAColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NM_PESSOA' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.NM_PESSOAColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DC_FEDERAL() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.DC_FEDERALColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DC_FEDERAL' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.DC_FEDERALColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NM_CONTATO() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.NM_CONTATOColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NM_CONTATO' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.NM_CONTATOColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TE_CONTATO() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.TE_CONTATOColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TE_CONTATO' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.TE_CONTATOColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TE_CORPORATIVO() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.TE_CORPORATIVOColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TE_CORPORATIVO' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.TE_CORPORATIVOColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TE_FAX() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.TE_FAXColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TE_FAX' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.TE_FAXColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ED_CIDADE() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.ED_CIDADEColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ED_CIDADE' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.ED_CIDADEColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ED_UF() As String
                Get
                    Try 
                        Return CType(Me(Me.tableMSK_FORNECEDOR.ED_UFColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ED_UF' in table 'MSK_FORNECEDOR' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableMSK_FORNECEDOR.ED_UFColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTP_PESSOANull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.TP_PESSOAColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTP_PESSOANull()
                Me(Me.tableMSK_FORNECEDOR.TP_PESSOAColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNM_PESSOANull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.NM_PESSOAColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNM_PESSOANull()
                Me(Me.tableMSK_FORNECEDOR.NM_PESSOAColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDC_FEDERALNull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.DC_FEDERALColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDC_FEDERALNull()
                Me(Me.tableMSK_FORNECEDOR.DC_FEDERALColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNM_CONTATONull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.NM_CONTATOColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNM_CONTATONull()
                Me(Me.tableMSK_FORNECEDOR.NM_CONTATOColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTE_CONTATONull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.TE_CONTATOColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTE_CONTATONull()
                Me(Me.tableMSK_FORNECEDOR.TE_CONTATOColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTE_CORPORATIVONull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.TE_CORPORATIVOColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTE_CORPORATIVONull()
                Me(Me.tableMSK_FORNECEDOR.TE_CORPORATIVOColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTE_FAXNull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.TE_FAXColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTE_FAXNull()
                Me(Me.tableMSK_FORNECEDOR.TE_FAXColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsED_CIDADENull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.ED_CIDADEColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetED_CIDADENull()
                Me(Me.tableMSK_FORNECEDOR.ED_CIDADEColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsED_UFNull() As Boolean
                Return Me.IsNull(Me.tableMSK_FORNECEDOR.ED_UFColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetED_UFNull()
                Me(Me.tableMSK_FORNECEDOR.ED_UFColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class MSK_FORNECEDORRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As MSK_FORNECEDORRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As MSK_FORNECEDORRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As MSK_FORNECEDORRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ModificaCompletedEventHandler(ByVal sender As Object, ByVal e As ModificaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModificaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MascaraTeste.MSK_FORNECEDORDataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MascaraTeste.MSK_FORNECEDORDataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub fillMascaraCompletedEventHandler(ByVal sender As Object, ByVal e As fillMascaraCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class fillMascaraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property x() As MascaraTeste
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MascaraTeste)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getMascaraCompletedEventHandler(ByVal sender As Object, ByVal e As getMascaraCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMascaraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MascaraTeste.MSK_FORNECEDORDataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MascaraTeste.MSK_FORNECEDORDataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub setMascaraCompletedEventHandler(ByVal sender As Object, ByVal e As setMascaraCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setMascaraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub updateMascaraCompletedEventHandler(ByVal sender As Object, ByVal e As updateMascaraCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateMascaraCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property DS() As MascaraTeste
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),MascaraTeste)
            End Get
        End Property
    End Class
End Namespace
